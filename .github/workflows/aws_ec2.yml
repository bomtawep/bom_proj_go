name: Deploy to Amazon EC2

env:
  APP_NAME: "golang"
  APP_PORT: "8080"
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  HOST_DNS: ${{ secrets.HOST_DNS }}
  TARGET_DIR: ${{ secrets.TARGET_DIR }}
  IMAGE_TAGS: latest

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
    
jobs:
  ci-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: |
        echo "Test build"
  ci-aws-build:
    needs: ci-build
    name: deploy to AWS
    runs-on: ubuntu-20.04
    environment: production
    outputs:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = {
            EC2_SSH_KEY: `${{ secrets.EC2_SSH_KEY }}`,
            HOST_DNS: `${{ secrets.HOST_DNS }}`,
            TARGET_DIR: `${{ secrets.TARGET_DIR }}`,
          };
          core.info(`Secrets: ${secrets}`)
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    - name: Build from Dockerfile
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.IMAGE_TAGS }}

        dockerfiles: |
          ./Dockerfile
    - name: Push to registry
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}
